import pygame
import random

# Initialize pygame
pygame.init()

# Constants for display and grid
WIDTH, HEIGHT = 750, 750
GRID_SIZE = 15
CELL_SIZE = WIDTH // GRID_SIZE
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Game")

# Define colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)
BROWN = (139, 69, 19)  # Apple stem color
SHADOW = (50, 50, 50)   # Shadow color for 3D effect
YELLOW = (255, 255, 0)  # For eyes
BLUE = (0, 0, 255)      # For eyes
GRAY = (169, 169, 169)  # For sunglasses

# Set up the clock for controlling the frame rate
clock = pygame.time.Clock()
FPS = 10  # Game speed

# Initialize high score and player initials
high_score = 0
high_score_player = "None"

# Define the Snake class
class Snake:
    def __init__(self):
        self.body = [(7, 7)]  # Start with a single segment in the center
        self.direction = (0, 0)  # No movement initially
        self.length = 1
        self.score = 0  # Player's current score

    def move(self):
        head_x, head_y = self.body[0]
        new_head_x = head_x + self.direction[0]
        new_head_y = head_y + self.direction[1]

        # Wrap around the screen edges
        new_head_x %= GRID_SIZE  # Wrap around horizontally
        new_head_y %= GRID_SIZE  # Wrap around vertically

        self.body.insert(0, (new_head_x, new_head_y))

        # If snake has eaten food, don't remove the last segment (snake grows)
        if self.length < len(self.body):
            self.body.pop()

    def change_direction(self, direction):
        if direction == 'UP' and self.direction != (0, 1):
            self.direction = (0, -1)
        elif direction == 'DOWN' and self.direction != (0, -1):
            self.direction = (0, 1)
        elif direction == 'LEFT' and self.direction != (1, 0):
            self.direction = (-1, 0)
        elif direction == 'RIGHT' and self.direction != (-1, 0):
            self.direction = (1, 0)

    def grow(self):
        self.length += 1
        self.score += 1

    def collide_with_self(self):
        # Check if the snake collides with itself
        return len(self.body) != len(set(self.body))

# Function to draw the snake's head resembling a smiley face
def draw_snake(snake):
    for i, segment in enumerate(snake.body):
        pygame.draw.rect(screen, SHADOW, (segment[0] * CELL_SIZE + 3, segment[1] * CELL_SIZE + 3, CELL_SIZE, CELL_SIZE))
        pygame.draw.rect(screen, GREEN, (segment[0] * CELL_SIZE, segment[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE))
        
        if i == 0:
            # Drawing the snake's head as a smiley face (round shape with eyes and a smile)
            pygame.draw.circle(screen, SHADOW, (segment[0] * CELL_SIZE + CELL_SIZE // 2 + 3, segment[1] * CELL_SIZE + CELL_SIZE // 2 + 3), CELL_SIZE // 2)
            pygame.draw.circle(screen, GREEN, (segment[0] * CELL_SIZE + CELL_SIZE // 2, segment[1] * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 2)

            # Eyes
            pygame.draw.circle(screen, WHITE, (segment[0] * CELL_SIZE + CELL_SIZE // 4, segment[1] * CELL_SIZE + CELL_SIZE // 4), 7)
            pygame.draw.circle(screen, WHITE, (segment[0] * CELL_SIZE + 3 * CELL_SIZE // 4, segment[1] * CELL_SIZE + CELL_SIZE // 4), 7)
            pygame.draw.circle(screen, BLUE, (segment[0] * CELL_SIZE + CELL_SIZE // 4, segment[1] * CELL_SIZE + CELL_SIZE // 4), 4)
            pygame.draw.circle(screen, BLUE, (segment[0] * CELL_SIZE + 3 * CELL_SIZE // 4, segment[1] * CELL_SIZE + CELL_SIZE // 4), 4)
            
            # Drawing the smile
            pygame.draw.arc(screen, BLACK, (segment[0] * CELL_SIZE + 10, segment[1] * CELL_SIZE + CELL_SIZE // 2, 
                                           CELL_SIZE - 20, 20), 3.14, 0, 2, 3)

# Function to generate food
def generate_food(snake):
    while True:
        food_x = random.randint(0, GRID_SIZE - 1)
        food_y = random.randint(0, GRID_SIZE - 1)
        food_pos = (food_x, food_y)

        # Ensure food does not spawn on the snake's body
        if food_pos not in snake.body:
            return food_pos

# Function to draw food (apple)
def draw_food(food):
    pygame.draw.circle(screen, RED, (food[0] * CELL_SIZE + CELL_SIZE // 2, food[1] * CELL_SIZE + CELL_SIZE // 2), CELL_SIZE // 2)
    pygame.draw.rect(screen, BROWN, (food[0] * CELL_SIZE + CELL_SIZE // 2 - 2, food[1] * CELL_SIZE + CELL_SIZE // 2 - 10, 4, 8))  # Apple stem

# Function to display the score and high score
def display_scores(snake):
    font = pygame.font.SysFont(None, 30)
    score_text = font.render(f"Score: {snake.score}", True, WHITE)
    high_score_text = font.render(f"High Score: {high_score} ({high_score_player})", True, WHITE)
    screen.blit(score_text, (10, 10))
    screen.blit(high_score_text, (10, 40))

# Function to display the "Nice Try!!!" message when the player is disqualified
def display_nice_try_message():
    font = pygame.font.SysFont(None, 50)
    message = font.render("Nice try!!!", True, WHITE)
    screen.blit(message, (WIDTH // 4, HEIGHT // 3))

# Function to display the end game message
def display_end_message(snake):
    font = pygame.font.SysFont(None, 50)
    game_over_text = font.render(f"Game Over! Score: {snake.score}", True, WHITE)
    high_score_message = font.render(f"High Score: {high_score}", True, WHITE)
    screen.blit(game_over_text, (WIDTH // 4, HEIGHT // 3))
    screen.blit(high_score_message, (WIDTH // 4, HEIGHT // 2))

# Main game loop
def game_loop():
    global high_score, high_score_player
    snake = Snake()
    food = generate_food(snake)
    game_over = False

    while not game_over:
        screen.fill(BLACK)  # Clear the screen

        # Handle events (key presses)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    snake.change_direction('UP')
                elif event.key == pygame.K_DOWN:
                    snake.change_direction('DOWN')
                elif event.key == pygame.K_LEFT:
                    snake.change_direction('LEFT')
                elif event.key == pygame.K_RIGHT:
                    snake.change_direction('RIGHT')

        # Move the snake
        snake.move()

        # Check for collisions with self
        if snake.collide_with_self():
            game_over = True
            display_nice_try_message()  # Show the "nice try" message

            # Wait for any key press to close the game
            waiting_for_key = True
            while waiting_for_key:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        waiting_for_key = False
                    elif event.type == pygame.KEYDOWN:
                        waiting_for_key = False

        # Check if snake eats food
        if snake.body[0] == food:
            snake.grow()
            food = generate_food(snake)

        # Draw everything
        draw_snake(snake)
        draw_food(food)

        # Display score and high score
        display_scores(snake)

        # Update the display
        pygame.display.update()

        # Set the game speed
        clock
